---
- name: generate token
  template:
    src: "token.csv.j2"
    dest: "{{ pillar.ca_common.config_dir }}/token.css"

- name: generate kubeconfig cluster
  shell: "kubectl config set-cluster kubernetes"\
         "  --certificate-authority={{ pillar.ca_common.config_dir }}/{{ pillar.ca_common.ca_dir }}/ca.pem"\
         "  --embed-certs=true"\
         "  --server={{ pillar.k8s_master_server | join(',') }}"\
         "  --kubeconfig=bootstrap.kubeconfig"
  args:
    chdir: "{{ pillar.ca_common.config_dir }}"


# 设置集群参数
kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER} \
  --kubeconfig=bootstrap.kubeconfig

# 设置客户端认证参数
kubectl config set-credentials kubelet-bootstrap \
  --token=${BOOTSTRAP_TOKEN} \
  --kubeconfig=bootstrap.kubeconfig

# 设置上下文参数
kubectl config set-context default \
  --cluster=kubernetes \
  --user=kubelet-bootstrap \
  --kubeconfig=bootstrap.kubeconfig

# 设置默认上下文
kubectl config use-context default --kubeconfig=bootstrap.kubeconfig
